name: quality assurance

on: [push, pull_request]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Set up Node.js
      uses: actions/setup-node@v1
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: "730326aca6be924ab42d54e9d58b1184"
    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: "ac4d7baefb590ce47f525ca2063ee844"
    - name: Install dependencies required by the grammar check step
      run: " pip3 install jupyterlab && pip3 install --force-reinstall nbconvert==5.5 && npm install --global spellchecker-cli"
    - name: Convert jupyter notebooks to markdown
      run: " jupyter nbconvert **/*.ipynb --to markdown"
    - name: Check grammar
      run: "spellchecker '**/*.md'  --dictionaries .github/workflows/dictionary.txt"
    - name: Copy project folder structure to runner
      run: " cp **/*.ipynb . &&  find . -type d | cpio -pd /home/runner/work/_temp/nb-runner"
    - name: Install dependencies required to test the Jupyter notebooks (tensorflow, keras, numpy)
      run: "echo '{}' > params.json && pip3 install -U pip && pip3 install -U setuptools && pip3 install -r requirements.txt"
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "1-Introduction/perceptrons.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "2-Basic-neural-networks/Regression-model-wine-quality.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "2-Basic-neural-networks/Regression-model-Boston-housing.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "2-Basic-neural-networks/Classification-model-iris-flowers.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "2-Basic-neural-networks/Solutions/Regression-model-wine-quality.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "2-Basic-neural-networks/Solutions/Regression-model-Boston-housing.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "2-Basic-neural-networks/Solutions/Classification-model-iris-flowers.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "3-Feeding-your-models-with-data/Dealing-with-data.ipynb"
        params: "params.json"
        isReport: False
    - uses: yaananth/run-notebook@v1
      env:
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        GITHUB: ${{ toJson(github) }}
      with:
        notebook: "4-Solving-common-challenges/common-problems.ipynb"
        params: "params.json"
        isReport: False
    - uses: actions/upload-artifact@master
      if: always()
      with:
        name: output
        path: ${{ RUNNER.temp }}/nb-runner
      env:
        RUNNER: ${{ toJson(runner) }}
